"""
LISTAS []->listas
() ->tuplas
{} ->Diccionarios
Son contenedores de datos
Son numerables
conjunto de datos, separados por comas, ordenados segun su ingreso
La primera posicion(INDICE) es cero
"""
lista_pares= [2,4,6,8,10]
from os import system
#tamaño de lista es 5
print(len(lista_pares))#imprime el tamaño de 
print(lista_pares)
print([2,4,6,8,10])

#indice o posicion
print(lista_pares[0])#2
print(lista_pares[1])#4
print(lista_pares[2])#6
print(lista_pares[3])#8
print(lista_pares[4])#10
#print(lista_pares[5])#IndexError: list index out of range
print("")

print(lista_pares[-1])#5 ultimo elemento de la lista
print(lista_pares[-2])#8 penultimo elemento de la lista

lista_vacia=[]#tamaño es cero

#METODOS
print(lista_pares.__dir__)# <built-in method __dir__ of list object at 0x000001F0E275D900>
print(lista_pares.__dir__())

#append(dato)=>agregar un elemento al final de la lista
lista_vacia.append("Lunes")# solo se puede agregar de un elemento
lista_pares.append(13)
print(lista_vacia)
lista_vacia.append("Martes")
lista_vacia.append("Miercoles")
print(lista_vacia)
system("cls")
#insert(indice, elemento) => inserta un elemento en una posicion especifica
lista_vacia.insert(3,"Jueves")
print(lista_vacia)# ['lunes', 'martes', 'miercoles', 'jueves']
lista_vacia.insert(3,"Viernes")#Inserto un elemento en esa posicion
print(lista_vacia)#['lunes', 'martes', 'miercoles', 'viernes','jueves'] coloca el valor en la posicion 3 y desplaza el valor que estava ala siguiente posision
lista_vacia[3]="Jueves"#Reemplazar el elemento en esa posicion 
#lista_vacia[6]="Jueves"IndexError: list assignment index out of range

print(lista_vacia)#Reemplazo el elemento en esa posicion
lista_vacia.insert(10,"Sabado")# lo inserta en el valor final
print(lista_vacia)#['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Jueves', 'Sabado']

system("cls")
#pop => saca el ulimo elemeto dentro de una lista, si no se pasa un indice
lista_vacia.pop()
print(lista_vacia)#['Lunes', 'Martes', 'Miercoles', 'Jueves', 'Jueves']
lista_vacia.pop(4)
print(lista_vacia)#['Lunes', 'Martes', 'Miercoles', 'Jueves']

eliminado=lista_vacia.pop(0)#lunes
print(f"El elemento eliminado {eliminado}")
print(lista_vacia)#['Martes', 'Miercoles', 'Jueves']

lista_eliminados = []
lista_eliminados.append(lista_vacia.pop(0))

#print(f"El elemento eliminado{eliminado}")
print(lista_vacia)#["martes", "Miercoles", "Jueves"]
print(lista_eliminados)#['Lunes']

system ("cls")
#remove(valor) => elimina el valor
#lista_vacia.remove("Martes")
print(lista_vacia)#(´Miercoles´,´Jueves´)
#lista-vacia.remove("Viernes")#ValueError: list.remove(x): x not in list
lista_vacia.append("Jueves")
print(lista_vacia)#['Miercoles', 'Jueves', 'Jueves']
lista_vacia.remove("Jueves")#elimine la primera coincidencia, de izq a derecha
print(lista_vacia)#[´Miercoles´,´Jueves´]

system("cls")

lista_vacia.insert(0, "martes")
lista_vacia.insert(0, "lunes")
lista_vacia.append("viernes")
lista_vacia.append("Sabado")
lista_vacia.append("Domingo")

#reverse=> invierte los elementos de la lista, el cambio es permanente
lista_vacia.reverse()
print(lista_vacia)#['miercoles', 'martes']

#sort()=> ordena los elementos en forma ascendente/alfabeticamente
lista_vacia.sort()
print(lista_vacia)#['Domingo', 'Jueves', 'Miercoles', 'Sabado', 'lunes', 'martes', 'viernes']

lista_pares.sort()
print(lista_pares)#[2, 4, 6, 8, 10, 13]
system("cls")

#RESPALDO DE LISTA

lista1 = lista_pares#[2, 4, 6, 8, 10, 13] => ESTO NO ES UN RESPALDO DE DATOS

lista2 = lista_pares.copy()#Si es un respaldo de la lista original
lista3 =lista_pares[:]#Si es un respaldo de la lista original

lista_pares.pop()
print("lista de pares",lista_pares)#
print(lista1)
print(lista2)
print(lista3)
lista4 = lista_pares + lista_vacia#Si es un respaldo de la lista ogiginal
lista5 = lista_vacia*1#Si es un respaldo de la lista ogiginal
lista6 = list(lista_pares)#Si es un respaldo de la lista ogiginal

#sorted(lista, reverse=True),ordena descendentamente, pero no es permanente
sorted(lista_pares, reverse= True)#ordena desc
print(sorted (lista_pares, reverse= True))#[10, 8, 6, 4, 2]
sorted(lista_pares)#ordena asc
sorted(lista_pares, reverse= False)#ordena asc

#index(elemento)=> retorna el indice del elemento que se busca en una lista

print("indice del elemento 8 es: ",lista_pares.index(8))
#print("indece del elemento 13 es: ",lista_pares.index(13)) ValueError: 13 is not in list

#CONCATENACION => union de listas
lista_final =lista_pares + lista_vacia
print("lista final", lista_final)
